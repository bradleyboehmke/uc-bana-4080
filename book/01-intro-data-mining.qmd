# Introduction

Welcome to your journey into the world of data science. Whether you're here out of curiosity, career aspirations, or because it's a required course, you're stepping into a field that blends logic, creativity, and curiosity to solve real-world problems using data. But let’s be honest—if you’ve never written a line of code before, the idea of learning Python or building machine learning models might feel a bit intimidating. You might even be wondering: *“Why do I need to learn this when tools like ChatGPT or Copilot can just write code for me?”*  That’s a fair question — and one we’ll unpack in this chapter. Our goal is to give you a clear picture of why learning these foundational skills still matters, why Python is at the heart of modern data science, and how to approach the learning process with the right expectations and mindset.

By the end of this chapter, you will:

* Understand why foundational coding and data skills matter in today’s world.
* Reflect on the role of GenAI tools like ChatGPT in the learning process.
* Recognize the value of learning Python for data science.
* Acknowledge the challenges of learning to code and adopt a growth mindset.


## Why are we here?

Let’s start with a story.

Imagine you're a college junior named Taylor who just landed a summer internship at a local marketing analytics firm. On your first day, your manager hands you a file — it's a messy spreadsheet filled with customer purchase data — and says, *“We’re trying to understand what drives repeat purchases. Can you dig into this and see what you find?”*

Taylor freezes.

You’ve taken calculus, stats, and maybe even a regression course. You’ve know Excel, used it to build a few dashboards in your business classes, and maybe dabbled in a little VBA. You know how to analyze formulas on paper and interpret statistical summaries. You’ve studied how marketing campaigns influence consumer behavior, how pricing affects demand, how supply chains function, and how companies generate profits.

But now, faced with a real dataset and a vague question, you’re not sure where to begin.

- Do you start sorting columns manually?
- Write an IF statement?
- Ask ChatGPT to explain the data?
- Look for a “correlation” button in Excel?

You know there’s a story in the data; something important about customer behavior that the business wants to uncover. But without a roadmap, the numbers feel more overwhelming than enlightening.

### You’ve built the foundation—now it’s time to apply it.

That feeling Taylor has? That’s not a sign of being unprepared, it’s a sign of the gap that exists between traditional classroom learning and the real-world application of data science.

You already know more than you think:

* You understand business operations, customer behavior, and the bottom-line goals companies care about.
* You’ve studied quantitative methods and statistical inference.
* You know how to think critically and ask good questions.

What you *haven’t* had (yet) is the experience of turning raw data into actionable insight using tools like Python to clean, explore, visualize, and model information in a repeatable, scalable way.

That’s where this course comes in.

### This course is about doing.

We’re going to close the gap between the theory you’ve learned and the practice that’s expected in today’s data-driven workplace. You’ll work with messy datasets just like Taylor’s. You’ll write code to clean, organize, and analyze real data. And you’ll build up your own toolkit so that, the next time someone asks you to “see what you can find,” you won’t freeze — you’ll get to work.

And yes, we’ll even talk about when to use tools like ChatGPT to help you along the way (and when not to).

::: {.callout-note}
By the end of this course, you’ll have the confidence and experience to tackle open-ended data problems, the skills to automate and scale your work, and the mindset to keep growing as a data-driven problem solver.
:::

## Isn’t AI supposed to do all this for us now?

Let’s address the question that’s probably been lingering in your mind since the moment you signed up for this course:

> *“Why do I need to learn how to code when tools like ChatGPT, Copilot, and Claude can just do it for me?”*

It’s a fair question.

In fact, you may have already used one of these tools to generate code. Maybe you asked ChatGPT to “write a Python script that reads a CSV file and finds the average,” and in seconds — boom — you had something that worked.

So... case closed, right? Not quite.

### AI is helpful—but it’s not a substitute for understanding.

Generative AI tools are incredible accelerators. They can save time, reduce friction, and provide helpful starting points. But they’re not magic. They don’t *know* your data. They don’t *understand* the business context. And they certainly don’t *guarantee* correct answers.

These tools work by predicting the next most likely word or line of code based on patterns in data they’ve seen. They don’t reason like humans. They can’t debug your logic or decide which metric is appropriate for your analysis. And sometimes? They just make stuff up.

::: {.callout-warning collapse="true"}
## Callout: It’s like autocorrect but for code!

If you’ve ever had your phone turn “on my way!” into “omg my weasel!” — you already understand how these tools work.

GenAI models, like ChatGPT and Copilot, are basically super-powered autocomplete engines. They’re predicting what comes next based on what they’ve seen before. That means they can sometimes nail it... and other times leave you wondering, *“What were you even trying to say?”*

![](images/7-chocolate-shart-just-asked-and-guy-laughed-at-5-minutes-omg-omg-s-chocolate-sparkle-am-lmao-sorry.jpeg){width=30%}

Just like with autocorrect, the key is knowing when the suggestion is helpful—and when to hit backspace.
:::

If you don’t have the foundational skills, you won’t know when they’re wrong—or worse, when they’re *subtly* wrong.

### AI tools are assistants, not autopilots.

Learning how to code and analyze data yourself is what allows you to:

* Spot mistakes in generated code
* Ask better questions (better prompts = better results)
* Customize and build on what AI gives you
* Evaluate whether an approach is valid or helpful
* Explain what your analysis means and how it should be used

You don’t need to *fear* these tools. But you also don’t want to *depend* on them blindly. This course will teach you the skills needed to use AI as a powerful assistant — **not a crutch**.

::: {.callout-note collapse="true"}
## Student Reflection Prompt

Have you ever used a tool like ChatGPT, Claude, or Copilot to generate code or solve a problem?

* What did it get right?
* What did it miss?
* How confident were you in the result?
:::

In the chapters ahead, we’ll sometimes bring GenAI tools into the learning process, especially as helpers for things like brainstorming or debugging. But we’ll always emphasize the importance of *understanding the code you’re working with*. Otherwise, you’re just copying answers without learning anything—which is like using a calculator to solve a math problem you never actually learned.

And trust us: if you ever find yourself in Taylor’s shoes—staring at a spreadsheet and needing to figure out what matters—you’ll want more than a chatbot. You’ll want skill.


## Why Python, and why now?

So far, we’ve talked about why it’s important to build foundational skills and not overly rely on AI tools. But that probably leaves you with another question:

> *“Out of all the programming languages out there, why are we learning Python?”*

It’s a good question — and the answer is simple: **Python is the language of modern data science.**

### Python is beginner-friendly, but not just for beginners.

Python was designed to be easy to read and write. Its syntax is clean and (mostly) intuitive, which means you won’t spend hours trying to remember obscure symbols or puzzling over where the semicolon went. That makes it a great first language for students who are new to programming.

But don’t mistake simplicity for lack of power. Python is also used by:

* Data scientists at companies like Google, Netflix, and Spotify
* Analysts at healthcare organizations, banks, and nonprofits
* Researchers running simulations and training machine learning models
* Engineers building large-scale data pipelines and AI tools

So while Python is accessible to beginners, it’s also respected and widely used by professionals. In fact, according to the [2023 Stack Overflow Developer Survey](https://survey.stackoverflow.co/2023/#technology-programming-scripting-and-markup-languages), Python ranks as one of the **top three most commonly used programming languages** overall, and is consistently a favorite among developers working in data science, machine learning, and academic research. Its combination of readability, power, and a rich ecosystem of libraries makes it a go-to language across industries and roles.

### It’s not just the language, it’s the ecosystem.

Python has a massive collection of libraries and packages built specifically for data work. Here are just a few you’ll get to know in this course but realize there are tens of thousands of open source Python libraries that you can use for various data science tasks:

* **pandas** – for working with data tables
* **numpy** – for efficient numerical computation
* **matplotlib** and **seaborn** – for data visualization
* **scikit-learn** – for building machine learning models

This ecosystem means you won’t have to build everything from scratch. You’ll learn to stand on the shoulders of open-source giants so you can focus more on solving problems and less on reinventing the wheel.

### Python is your toolset. This course is your training ground.

In this course, you’ll learn how to:

* Write Python code that manipulates and explores real datasets
* Use libraries like pandas and matplotlib to summarize and visualize your data
* Build your first machine learning models with tools like scikit-learn
* Gain confidence in reading and modifying code — whether it came from a textbook, a blog post, or a GenAI assistant


By the end of this course, Python won’t feel like some intimidating, foreign technical concept you’ve been avoiding or unsure how to approach. It will become a practical skill—a tool you know how to use to explore data, uncover insights, and drive real decisions. And here’s the best part: you’ll be learning the same tool that analysts, data scientists, and business teams across your future organization are already using. Instead of feeling left out of the conversation, you’ll be equipped to lead it.


## Learning to code: a reality check

Let’s be real for a minute.

Learning to code can be frustrating at first. It’s not always fun to stare at an error message that makes zero sense. It’s even less fun when you fix that error... only to get a brand-new one. You might feel stuck, confused, or like everyone else “gets it” but you.

That’s normal. In fact, it’s expected.

### Learning to code is like learning a new language (because it is)

When you’re first learning a spoken language, you stumble over basic phrases. You forget vocabulary. You mess up grammar. But over time, with practice, you start to think in the new language — and eventually, it just *clicks*.

Coding is the same way. You’ll start by copying examples and Googling error messages. That’s fine. That’s part of the process. Over time, those patterns will stick. You’ll stop memorizing and start *thinking* in code.

### This course is designed for beginners

You don’t need prior programming experience to succeed here. We’ll start from the very beginning: writing simple statements, understanding variables and data types, building up to loops, functions, and eventually full data science workflows.

You’ll go from:

> *“What’s a variable?”*

to...

> *“I just built a machine learning model to predict customer churn.”*

Step by step. Week by week. You’ll get there. And don’t feel like you have to go it alone.

::: {.callout-tip collapse="true"}
## Lean on your classmates.

If you're stuck, chances are someone else is too. Use the classroom discussion board to ask questions, share what you’re learning, and help each other out. This is a collaborative course, and we’re building a community of learners who grow together.
:::

### It’s okay to use AI tools but don’t skip the struggle

You’ll be encouraged to use tools like ChatGPT, Copilot, and Claude throughout this course. But here’s the rule: use them to **learn**, not to **avoid learning**.

Think of these tools as tutors, not answer keys:

* Use them to check your understanding
* Ask them for help when you're stuck
* Compare their answers to your own and figure out the differences
* But always make sure *you* understand what the code is doing

Shortcuts don’t help if you skip the part where you build skill.


Learning to code is like learning anything meaningful—it takes effort, patience, and a little bit of resilience. You won’t get everything right the first time, and that’s okay. You don’t need to be perfect. You just need to keep showing up and keep trying.

And we’ll be right here to help every step of the way.


## Wrap-Up

You’ve made it through your first chapter — nicely done!

We’ve talked about why data science matters, why Python is the language we’re using, and why learning these skills (even in the age of AI) still gives you a powerful edge. We’ve also tried to set realistic expectations: learning to code can be challenging, but it’s absolutely doable—with patience, practice, and support from your classmates, instructors, and tools like ChatGPT when used wisely.

The big takeaway? You’re not here to memorize formulas or passively watch someone else code. You’re here to build real skills that will help you ask better questions, explore real-world data, and create insights that drive decisions.

And we’re not wasting any time. In the next chapter, we’ll jump right in — you’ll get your Python environment set up and write your first lines of code. This is where the hands-on part of the journey begins.

This course moves fast, so buckle up and enjoy the ride. Let’s get started!

## Exercise: “Can You Help Taylor?”

::: {.callout collapse="true"}
## Scenario

You’re stepping into Taylor’s shoes.  You’ve just been handed [three datasets](https://tinyurl.com/retail-data) by your manager at a local marketing analytics firm:

1. **transactions.csv** — individual transactions from various customers, but... it’s a litle messy.
2. **hh_demographics.csv** — customer-level information including age, household size, income level, etc.
3. **product.csv** - product-level information such as manufacturer, brand, commodity type, package size, etc.

Your job is to begin exploring what factors might be influencing repeat purchases. But before you can even analyze anything, you'll need to clean, combine, and make sense of the data.

Throughout this exercise your objective is to:

* Inspect and describe real-world “messy” data
* Identify issues that must be addressed before analysis
* Strategize a plan for cleaning and joining datasets
* Experiment with using ChatGPT to assist your data work
* Reflect on how foundational skills + GenAI can be used together
:::

::: {.callout collapse="true"}
## Part 1 – Get Oriented

Start by opening the **transactions data** and take a few minutes to explore it.

**Questions:**

1. What’s messy or confusing about this data?
2. What would your first 2–3 steps be if you were asked to clean or prepare it for analysis?
3. Based on this table alone, what kinds of analyses *might* you try to do?
:::

::: {.callout collapse="true"}
## Part 2 – Meet the Second Dataset

Now open the **household demographic** and the **product information** data.

**Questions:**

1. What types of information does this dataset contain that might help you understand customer behavior?
2. How would you combine these with the transactions data?
3. What issues do you foresee when trying to join them?
:::

::: {.callout collapse="true"}
## Part 3 – Ask for Help (But Be Smart About It)

Use [ChatGPT](https://chatgpt.com/) (or any GenAI tool you're comfortable with) to begin cleaning or analyzing the data.

**Instructions:**

* Try writing 2–3 different prompts to help with basic data cleaning, joining, or summarizing the data.
* Try at least one prompt that combines both datasets.

**Then reflect:**

1. What prompts did you use?
2. Did the AI return usable code?
3. Were there any errors, misunderstandings, or surprises?
4. Did you understand what the code was doing? If not, what helped you figure it out?
:::

::: {.callout collapse="true"}
## Part 4 – Pull It All Together

**Write a short summary (5–7 sentences) answering the following:**

* What was your biggest takeaway from working with these datasets?
* How did this exercise reinforce the ideas from Chapter 1?
* Did this change your perspective on what *your role* is when using AI tools like ChatGPT in data analysis?
* How do you feel about starting your journey into Python after completing this activity?
:::