# Python Basics ‚Äì Working with Data and Variables

If you're new to Python or programming in general, welcome‚Äîyou‚Äôre in the right place. This chapter is where we start turning ideas into code. Just like learning a new language starts with learning a few key words and phrases, learning Python begins with understanding how to work with basic building blocks: numbers, text, and data containers.

Why is this important? Because whether you‚Äôre analyzing customer data, building a machine learning model, or automating a task at work, you‚Äôll rely on these foundational concepts every single time you write code. Think of this chapter as your toolbox‚Äîit may seem simple now, but you‚Äôll keep coming back to these tools throughout your data science journey.

And don‚Äôt worry if it doesn‚Äôt all click right away. Everyone struggles with syntax or logic at first. Learning to code is more like learning to solve puzzles than memorizing rules. Take your time, experiment, and remember: errors are part of the process (even experienced coders Google stuff constantly).

By the end of this chapter, you‚Äôll be able to:

* Identify and use Python's basic data types (numbers, strings, booleans)
* Store and retrieve values using variables
* Use comparison operators to make logical expressions
* Write basic code that performs operations on individual values and collections of data

Let‚Äôs dive in.

## Try It Before We Start!

Let‚Äôs write a few lines of Python code. Run the following in a Python environment (like Google Colab, Jupyter Notebook, or VS Code) and see what happens:

```{python}
#| label: basics-try-it

# Store your name as a string
name = "Taylor"

# Store your age as a number
age = 22

# Print a personalized message
print("Hi " + name + "! You are " + str(age) + " years old.")

# Calculate how many years until you turn 30
years_to_30 = 30 - age
print("You'll turn 30 in " + str(years_to_30) + " years.")
```

 What just happened?

* You stored information using **variables**
* You worked with different **data types** (a string and a number)
* You used **basic math** and printed a personalized message

Don‚Äôt worry if this isn‚Äôt totally clear yet‚Äîthat‚Äôs what this chapter is for. We'll break it all down step by step.

## Python Data Types

Everything in Python is an *object*, and every object has a **type**. A data type tells Python what kind of value you're working with‚Äîwhether it‚Äôs a number, a piece of text, or a simple `True`/`False` flag. Understanding Python's core data types is a fundamental step toward writing useful programs.

Let‚Äôs walk through a quick introduction to the most common data types you‚Äôll encounter early on. As we progress through this class and book, you‚Äôll explore many more ways to work with and manipulate these data types.

{{< video https://youtu.be/XED48JR9Zhk?si=OyPi1gyF31amns8r >}}

### Numeric Types

Python has two main types of numbers:

* `int` (integers): whole numbers like `5`, `42`, or `-100`
* `float` (floating-point): numbers with decimals like `3.14`, `0.5`, or `-2.718`

You can do all kinds of math with numbers in Python using simple operators:

```{python}
#| label: simple-addition
10 + 3.5   # Addition
```

```{python}
#| label: simple-multiplication
10 * 3.5   # Multiplication
```

Go ahead and run these lines of code in your notebook:

```python
# Basic operations
10 - 3.5   # Subtraction
10 * 3.5   # Multiplication
10 / 3.5   # Division (always returns a float)

# More math
10 ** 3.5  # Exponentiation (10^2 = 100)
10 // 3.5  # Integer division (result is an int)
10 % 3.5   # Modulus (remainder)
```

::: {.callout-warning}
## Heads Up: Python Math Isn‚Äôt Always Perfect

Sometimes, Python (like all programming languages) can give results that look a little... off. This usually happens because computers represent decimal numbers using floating-point approximation, which isn‚Äôt always exact.

For example, you'd expect the following to equal `0.3` but instead...

```{python}
0.1 + 0.1 + 0.1
```

This tiny difference is due to how numbers like 0.1 are stored in computer memory. It‚Äôs a common issue when doing calculations with decimal values, especially in financial or scientific applications.  As we progress, you'll learn best practices to handle imperfections like this.  For now, you could just `round` it.

```{python}
round(0.1 + 0.1 + 0.1, ndigits=2)
```

:::



### Strings

A **string** is a sequence of characters, enclosed in single or double quotes - whichever you use is personal preference but the output in the Python environment will contain single quotes:

```{python}
#| label: simple-dbl-quote-string
"Hello Taylor!"
```

Strings can be combined and manipulated in many ways:

```{python}
#| label: combining-strings

# Concatenation
"Hello" + " " + "Taylor!"   # Hello Taylor!
```

Go ahead and run these lines of code in your notebook:

```python
# String repetition
"ha" * 3   # 'hahaha'

# Get first letter (starts at 0)
"Taylor"[0] # 'T'

# Get first three letters
"Taylor"[:3]   # 'Tay'
```

Strings are extremely common‚Äîyou‚Äôll use them to label, format, and present data in readable ways. 

::: {.callout-important}
In fact, as organizations increasingly rely on data-driven decision-making, a significant portion of their data comes in the form of text. Examples include product descriptions, customer feedback, social media posts, and even log files. Understanding how to work with strings is essential for extracting insights and making sense of this unstructured data.
:::

### Booleans

A **Boolean** is a special data type with only two values: `True` and `False`. 

```python
is_raining = True
has_umbrella = False
```

::: {.callout-important}
In Python, `True` and `False` are capitalized. Writing `true` or `false` (lowercase) will result in a `NameError`. Always ensure proper capitalization when working with booleans.
:::

You‚Äôll mostly use booleans when you write logical conditions, such as comparing values or checking if something is true. Don't worry, we'll discuss comparison operators (i.e. `>`, `==`) in a moment.

```{python}
#| label: simple-boolean-true
5 > 3      # True - 5 is greater than 3
```

```{python}
#| label: simple-boolean-false
5 == 3   # False - 5 does not equal 3
```

Go ahead and run these lines of code in your notebook:

```python
10 < 9
10 > 9
10 <= 9
10 >= 9
10 == 10
```

### Type Checking and Conversion

You can check the type of any object using the `type()` function:

```{python}
#| label: simple-type-check
print(type(10))        # <class 'int'>
print(type("hello"))   # <class 'str'>
```

::: {.callout-tip collapse="true"}
## A Quick Note on `print()`

When working in a Jupyter notebook, Python will automatically display the result of the last line in a cell if it‚Äôs a value (like a string or number). For example:

```{python}
#| label: simple-type-check-without-print
type(10)        
type("hello")   # will only show the output of this last line
```

But in most real Python programs‚Äîlike scripts, functions, or when running multiple lines‚Äîyou need to use `print()` to explicitly display something to the user:

```{python}
#| label: simple-type-check-with-print
print(type(10))        # will print print out this output...
print(type("hello"))   # and this output
```

Using `print(`)` is a way to say, *‚ÄúHey Python, show this to me in the output.‚Äù* You‚Äôll use it all the time for debugging, building interfaces, or just (as in this case) just to tell Python to display the output of each line of code.
:::

You can also **convert** between types using built-in functions. For example, the following converts the integer value of `5` to a string `'5'`.

```{python}
#| label: simple-conversion
str(5) # '5' (string to int)
```

And the following converts a string `'5'` to an integer `5`:

```{python}
#| label: simple-conversion2
int('5') # 5 (int to string)
```

Go ahead and run these lines of code in your notebook:

```python
print(type(3.5))     # <class 'float'>
print(type(True))    # <class 'bool'>
print(str(3.14))     # '3.14' (convert decimal to string)
print(bool(0))       # False (0 is treated as False)
print(float(2))      # 2.0 (convert integer to decimal)
```

These conversions come in handy when working with user input or cleaning messy data.

### Knowledge check

Work through the following tasks in your notebook. 

::: {.callout collapse="true"}
## üçï What‚Äôs the best deal?

A 12-inch pizza costs \$8. Use the formula for the area of a circle ($A = \pi √ó r^2$) to calculate the **cost per square inch** of the pizza.

Hints:

* Radius ($r$) is half the diameter
* Use `3.14159` as your approximation for $\pi$
* Divide the price by the area to get cost per square inch

Now repeate for a 15-inch pizza that costs \$12. Which is a better deal?
:::

::: {.callout collapse="true"}
## Play with 'strings'

First, guess what each line of code will result in.  Then run them in your notebook. Were the results what you expected?

```python
print("Python" + "Rocks")
print("ha" * 5)
print("banana"[1])
print("banana"[::-1])   # Can you guess what this does?
```

Extra challenge: Can you use slicing to print just the word `"ana"` from `"banana"`?
:::

::: {.callout collapse="true"}
## **üïµüèª‚Äç‚ôÇÔ∏è Data type detective**

Before you run the following, what do you think the data types are for each line?  Then, run the code in your notebook to check your answers. Were your predictions correct?

```python
print(type("True"))
print(type(True))
```
:::

## Variables and the Assignment Operator

In the last section, we did a lot of math using the same numbers ‚Äî `10` and `3.5` ‚Äî over and over again:

```python
# Basic operations
10 - 3.5
10 * 3.5
10 / 3.5
```

That works fine for short examples, but imagine writing a program that needs to use the same values in dozens of different places. What if you want to change one of those values later? You‚Äôd have to find and update every instance in your code.

That‚Äôs where **variables** come in.

### What Is a Variable?

A variable is a **name** that refers to a **value**. You can think of it like labeling a container that holds something useful‚Äîlike a number, a word, or even a list of things.

Here‚Äôs how we could rewrite the examples above using variables:

```python
x = 10
y = 3.5

print(x - y)
print(x * y)
print(x / y)
```

Much cleaner, right?

::: {.callout-important}
## Why Use Variables?

Variables help you:

* Avoid repeating values
* Make your code easier to read and maintain
* Update values in one place instead of many

And when your programs get more complex, variables become essential for storing user input, results from calculations, or intermediate steps in a data analysis.
:::

### The Assignment Operator: `=`

To create a variable, we use the **assignment operator** (`=`). This tells Python to take the value on the right and assign it to the name on the left:

```{python}
greeting = "Hello, world!"
```

This means - store the string `"Hello, world!"` in a variable called `greeting`

You can then reuse that variable:

```{python}
print(greeting)
```

::: {.callout-important}
In Python, `=` does **not** mean ‚Äúequal to‚Äù like in math. It‚Äôs an instruction: *assign the value*.
:::

### Naming Variables

Here are basic rules for naming variables in Python:

- ‚úÖ Must start with a letter (or an underscore `_` as in `_name`, though that‚Äôs typically reserved for special cases‚Äîso avoid starting with `_` unless you know what you're doing)
- ‚úÖ Can include letters, numbers, and underscores
- üö´ Cannot start with a number
- üö´ Cannot use built-in Python keywords (like `if`, `True`, `print`, etc.)

Some good examples:

```python
age = 25
student_name = "Taylor"
is_logged_in = True
```

Use **descriptive names** when possible‚Äîit makes your code easier for others (and future-you) to understand.

### Reassigning Variables

Variables can change! When you assign a new value to an existing variable, it overwrites the old one:

```{python}
x = 5
x = x + 1  # Now x is 6

print(x)
```

Python always uses the most recent value.

### You Can Store Any Type of Value

You can assign **any data type** to a variable‚Äînumbers, strings, booleans, and more:

```python
name = "Taylor"           # string
gpa = 3.85                # float
is_honors_student = True  # boolean
```

And Python is flexible ‚Äî you can even change what type a variable holds:

```python
gpa = "3.85"  # Now it's a string!
```

This is called **dynamic typing**, and it's part of what makes Python beginner-friendly.

### Knowledge check

::: {.callout collapse="true"}
## Try It!

Let‚Äôs return to our earlier example from the start of the chapter:

```python
# Store your name and age
name = "Taylor"
age = 22

# Print a custom message
print("Hi " + name + "! You are " + str(age) + " years old.")

# Do a little math
print("You'll turn 30 in " + str(30 - age) + " years.")
```

Try updating the values of `name` and `age` to reflect *your* info. Then tweak the message to include your graduation year or your major. Play around; don't worry you won‚Äôt break anything!
:::

## Comparison Operators

In the previous section on booleans, we saw that comparison expressions‚Äîlike `5 > 3` ‚Äî evaluate to either `True` or `False`. These expressions are powered by **comparison operators**, which are used to compare values in Python.

You'll use comparison operators all the time when writing conditions, checking data, filtering results, or writing logic into your programs.

Here‚Äôs a quick cheat sheet of the most common ones:

| Operator | Description              | Example  | Result  |
| -------- | ------------------------ | -------- | ------- |
| `==`     | Equal to                 | `5 == 5` | `True`  |
| `!=`     | Not equal to             | `5 != 3` | `True`  |
| `>`      | Greater than             | `10 > 7` | `True`  |
| `<`      | Less than                | `4 < 2`  | `False` |
| `>=`     | Greater than or equal to | `3 >= 3` | `True`  |
| `<=`     | Less than or equal to    | `8 <= 6` | `False` |

All of these expressions return a boolean value: `True` or `False`. Try running the following lines of code in your notebook:

```python
print(10 > 3)      # True
print(2 < 1)       # False
print(4 == 4.0)    # True (int and float are treated as equal in value)
print(4 != 5)      # True
print(6 >= 7)      # False
print(5 <= 5)      # True
```

You can also compare strings:

```python
print("apple" == "apple")    # True
print("Apple" == "apple")    # False (case matters!)
print("cat" < "dog")         # True (compares alphabetically)
```

::: {.callout-warning}
## Common Pitfalls

Don‚Äôt confuse `=` and `==`:

* `=` is the assignment operator (used to assign a value to a variable)
* `==` is the comparison operator (used to check if two values are equal)

```python
x = 5           # assignment
print(x == 5)   # comparison ‚Üí True
```
:::

### Knowledge check

::: {.callout collapse="true"}
## Which Pizza is the Better Deal?

Let‚Äôs build on a problem you saw earlier. This time, we‚Äôll:

- use variables to store the cost per square inch of two pizzas and 
- then use a comparison operator to see which one is the better deal.

**The Setup**

* A 12-inch pizza costs **\$8**
* A 15-inch pizza costs **\$12**
* Use the formula for the area of a circle:
  - $A = \pi \times r^2$
  - Use `3.14159` for œÄ

**Your Task**

1. Compute the **cost per square inch** for each pizza
2. Store the results in two variables: `small_pizza` and `large_pizza`
3. Use a comparison operator to check if the smaller pizza is a better or equal deal

Here‚Äôs a starting point:

```python
# Calculate cost per square inch for each pizza
small_pizza = 8 / (3.14159 * (12 / 2) ** 2)
large_pizza = 12 / (3.14159 * (15 / 2) ** 2)

# Compare them (insert proper comparison operator in the blanks)
print(small_pizza __ large_pizza)
```

What does the output of the comparison tell you? Try printing both values first to see how they compare. Which pizza gives you more for your money?

```python
print(small_pizza)
print(large_pizza)
```
:::


## Putting It All Together: Basic Python in Action

Now that you've learned about Python's core data types, how to assign values to variables, and how to make comparisons, let's put it all together into a small real-world example.

Imagine you're helping manage event registration for a student club. You want to:

* Store the number of attendees and the cost per ticket
* Calculate total revenue from the event
* Set a goal for how much you *wanted* to make
* Print a basic summary report
* Use comparison logic to see if you met your goal

Here‚Äôs how you might write that in Python:

```{python}
#| label: putting-it-together

# Number of attendees and ticket price
attendees = 48
ticket_price = 12.50

# Calculate total revenue
total_revenue = attendees * ticket_price

# Set a revenue goal
revenue_goal = 600

# Print a summary message
print("You sold " + str(attendees) + " tickets at $" + str(ticket_price) + " each.")
print("Total revenue: $" + str(total_revenue))

# Compare to revenue goal
goal_met = total_revenue >= revenue_goal
print("Did we meet our revenue goal: " + str(goal_met))
```

### What's going on here?

In these 8 lines of code we've combined everything we learned across this chapter:

* We used **variables** to store numbers and reused them in calculations
* We performed basic **math operations** using multiplication
* We used **`print()`** to display helpful messages, combining strings and numeric values
* We used **`str()`** to convert numeric and boolean data types to strings
* We used a **comparison operator (`>=`)** to return `True` or `False` based on whether our total revenue met the goal

### Try it Yourself!

1. Change the number of attendees or the ticket price. What happens to total revenue?
2. Try changing the revenue goal and see if the result of the comparison changes.
3. **Stretch:** Use a GenAI tool like ChatGPT, Claude, or Copilot and ask it to expand upon your code so that it prints 'Yaaah!' if we met the revenue goal, or 'Booo!' if we didn‚Äôt. Then copy the AI‚Äôs suggestion into your notebook and test it out. Can you understand what it did? Does the code work the way you expected? If not‚Äîcan you fix it?

::: {.callout-important}
Remember: GenAI tools are great helpers, but not always correct. Always try to understand the code they give you!
:::

This is your first step toward building programs that do real work. It may not seem fancy now‚Äîbut you've already written a script that stores, processes, and evaluates real-world data.


## Summary and What‚Äôs Next

In this chapter, you learned how to:

- Identify and use Python‚Äôs most common **data types**‚Äînumbers, strings, and booleans
- Use the **assignment operator** (`=`) to store and reuse values with **variables**
- Write and evaluate **comparison expressions** that return `True` or `False`
- Use **print statements** to combine and display information
- Start thinking like a programmer by working through simple real-world examples

These are the essential tools that will support everything you do moving forward‚Äîwhether you‚Äôre analyzing a spreadsheet, building a model, or writing a script to automate a task.

### What‚Äôs Next: From Basics to Real Data

Now that you‚Äôve learned how to work with individual values and variables, it‚Äôs time to start thinking *bigger*‚Äîabout how we structure and analyze real-world data. In the next module, we‚Äôll go deeper into three key topics:

* **Jupyter Notebooks**: You‚Äôve already seen Jupyter Notebooks in action, but now we‚Äôll explore just how powerful they are. Mastering Jupyter is about more than writing code‚Äîit‚Äôs about communicating insights clearly. You‚Äôll learn how to:
  * Combine text and code in the same document using Markdown
  * Format your notebook with headers, bullets, and even equations to make your work easier to understand
  * Structure your notebooks as professional, reproducible reports, just like a real data scientist would
* **Python Data Structures**: So far, you‚Äôve worked with *individual values* like one number or one string. But in data science, we almost never work with just *one* thing‚Äîwe work with *collections* of data. Understanding data structures is essential as we start to clean, transform, and analyze datasets so we'll cover:
  * Storing and accessing data using **lists** (ordered sequences of items)
  * Organizing key-value pairs using **dictionaries** (think of them like labeled data bins)
  * Looping through and manipulate these collections efficiently
* **Importing Real-World Datasets with Pandas**: You‚Äôll also take your first step into real data science work‚Äîbringing in external datasets and exploring them with the **Pandas** library. Pandas is one of the most important tools in any data scientist‚Äôs toolbox. It makes it easy to:
  * Read data from CSV files, Excel, databases, and more
  * View, clean, and filter your data
  * Begin asking real questions and discovering patterns

You‚Äôve built a strong foundation. Next, we‚Äôll build on it and start working with data the way real analysts and scientists do. Let‚Äôs keep going!


## Exercise: Build a Simple Event Summary

::: {.callout collapse="true"}
## The Scenario

Your student club is hosting an event and you're in charge of summarizing registration data. Use what you‚Äôve learned in this chapter to answer the following questions using Python.

Write all your code **from scratch**‚Äîno copy-pasting. Try to reason through the logic before typing.

* **Tickets sold:** 56
* **Ticket price:** \$10.50
* **Revenue goal:** \$600
* **Event name:** "Python for Everyone"
:::

::: {.callout collapse="true"}
## Your Tasks

1. **Create Variables**: Assign appropriate values to variables for:
   * Event name
   * Tickets sold
   * Ticket price
   * Revenue goal

2. **Calculate Total Revenue**: Use math operations to calculate the total revenue earned from ticket sales.

3. **Print a Summary Report**: Use `print()` and string concatenation to display a message like:

   ```
   The event "Python for Everyone" sold 56 tickets at $10.50 each.
   Total revenue: $588.0
   Met or exceeded goal: False
   ```

4. **Stretch Task** (Optional): Add a comparison that checks whether your total revenue met or exceeded the revenue goal and prints:

   * `"Yaaah! We met our goal!"` if the goal was met
   * `"Booo! We missed our goal."` if it was not

   *Hint: Ask a GenAI tool to help you construct the logic! If you can't get it, don't worry as we will talk about this later in the course.*
:::