# Python Basics – Working with Data and Variables

* Why understanding Python basics is important
* A note of encouragement: everyone starts here


By the end of this chapter, you will be able to:

* Identify and use Python's basic data types (numbers, strings, booleans)
* Store and retrieve values using variables
* Use comparison operators to make logical expressions
* Work with foundational data structures: lists, tuples, and dictionaries
* Write basic code that performs operations on individual values and collections of data

## Python Data Types

### Numeric Types

* Integers and floats
* Basic math operations (`+`, `-`, `*`, `/`, `**`, `//`, `%`)

### Strings

* Creating strings with quotes
* String concatenation and repetition
* String indexing and slicing

### Booleans

* `True` and `False`
* When and how booleans are used

### Type Checking and Conversion

* `type()` function
* `int()`, `float()`, `str()`, `bool()` conversions

### Knowledge check

::: {.callout}
TBD
:::

## Variables and the Assignment Operator

* What is a variable?
* Naming rules and conventions
* The `=` operator and how it works
* Examples of assigning and reassigning variables

### Knowledge check

::: {.callout}
TBD
:::

## Comparison Operators

* Equal to (`==`)
* Not equal to (`!=`)
* Greater than (`>`) / Less than (`<`)
* Greater than or equal to (`>=`) / Less than or equal to (`<=`)
* Using comparisons with variables and literals

### Knowledge check

::: {.callout}
TBD
:::

## Intro to Python Data Structures

### Lists

* Creating lists
* Indexing, slicing, and modifying
* Common methods: `.append()`, `.remove()`, `len()`

### Tuples

* What makes a tuple different from a list?
* When to use a tuple

### Dictionaries

* Key-value pairs
* Accessing and updating values
* Dictionary methods: `.get()`, `.keys()`, `.values()`

### Knowledge check

::: {.callout}
TBD
:::

## Putting It All Together: Basic Python in Action

* Use case: Calculate average of a list of grades
* Example: Store and evaluate user login attempts
* Small project: Create a grocery list and calculate total cost


## Summary and What’s Next

* Recap key concepts from this chapter
* Tease the next chapter: control flow and conditional logic


## Exercise

* Short tasks for each concept covered
* End-of-chapter mini challenge:

  * Write a short Python script that:

    * Stores a list of items
    * Applies a mathematical operation
    * Uses comparison logic
    * Saves and prints the final result