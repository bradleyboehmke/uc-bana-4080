# Packages, Libraries, and Modules

As a data scientist, you won‚Äôt be writing every piece of code from scratch. Python's true power comes from its **ecosystem of packages, libraries, and modules** that extend its core functionality. These tools allow you to analyze data, build machine learning models, visualize patterns, and automate complex tasks with just a few lines of code.

In this chapter, we‚Äôll explore what packages, libraries, and modules are, how to use them, and get hands-on with both built-in and third-party tools that will support you throughout this course.

By the end of this chapter, you will be able to:

* Understand the concepts of modules, libraries, and packages.
* Use modules from the standard library (e.g., `math`, `os`, `random`).
* Install and import third-party libraries.
* Describe the Python packaging ecosystem for data science.
* Start working with key libraries like `numpy`, `pandas`, `matplotlib`, and `seaborn`.

::: {.callout-note}
## üìì Follow Along in Colab!

As you read through this chapter, we encourage you to follow along using the [companion notebook](https://github.com/bradleyboehmke/uc-bana-4080/blob/main/example-notebooks/05_libraries.ipynb) in Google Colab (or other editor of choice). This interactive notebook lets you run code examples covered in the chapter‚Äîand experiment with your own ideas.

üëâ Open the [Libraries Notebook in Colab](https://colab.research.google.com/github/bradleyboehmke/uc-bana-4080/blob/main/example-notebooks/05_libraries.ipynb).
:::

## Why Do We Care?

You‚Äôve probably heard that Python is one of the most popular languages in data science‚Äîbut what makes it so powerful? One big reason is that Python gives you access to an enormous number of **libraries** that other people have written and shared.

A **library** is a reusable collection of code‚Äîfunctions, tools, or entire frameworks‚Äîthat someone else has written to make your life easier. Think of libraries as toolkits: instead of building a hammer every time you need to drive a nail, you just grab the hammer from your toolbox.

Python libraries can help you:

* Do complex math with a single function call.
* Read and clean messy data files.
* Visualize data with beautiful plots.
* Train machine learning models.

By using the right library, you can accomplish in just a few lines of code what might otherwise take hours of work.

Libraries are organized into **modules**, which are just files that group related code together. And when a collection of modules is bundled up and made shareable, we call that a **package**.

Throughout this course, you'll learn how to use some of the most powerful and popular Python libraries for data science. But first, let's get familiar with the different types of libraries available and how to start using them.

::: {.callout-note collapse="true"}
## Terminology: Modules, Libraries, and Packages

These three terms often get used interchangeably, but they have specific meanings in Python:
* **Module**: A single `.py` file that contains Python code‚Äîfunctions, variables, classes‚Äîthat you can reuse. For example, the `math` module lets you do mathematical calculations.

* **Module**: A single `.py` file that contains Python code‚Äîfunctions, variables, classes‚Äîthat you can reuse. For example, the `math` module lets you do mathematical calculations.
* **Library**: A collection of related modules bundled together. For example, `pandas` is a library that includes several modules for data manipulation.
* **Package**: A directory containing one or more modules or libraries, with an `__init__.py` file that tells Python it's a package. You can think of a package as the container that holds libraries and modules.

In practice, you‚Äôll often hear ‚Äúlibrary‚Äù and ‚Äúpackage‚Äù used to refer to the same thing: something you install with `pip` and then import to use in your code. That‚Äôs okay! At this point in your learning, understanding the subtle differences between these terms is not critical. What‚Äôs more important is knowing that Python‚Äôs modular structure allows you to mix and match tools depending on your needs and that these tools make your work much more efficient.

{{< video https://youtu.be/V9nns19WwPE?si=c-1--PYxwrFB1YnN >}}
:::


## Standard Library vs Third-Party Libraries

One of Python‚Äôs greatest strengths is its large collection of prebuilt tools. These tools fall into two broad categories: **the standard library**, which comes bundled with every Python installation, and **third-party libraries**, which you can download and install as needed.

### The Standard Library

The standard library is like Python‚Äôs starter toolbox. It includes modules for doing math, generating random numbers, managing dates and times, reading and writing files, and even accessing the internet. Because it's included with Python, you can use these modules right away‚Äîno installation required.

For example:

* Want to calculate square roots? Use the `math` module.
* Need to simulate randomness? Try `random`.
* Curious where your code is running? The `os` module has answers.

These are great building blocks and perfect for learning foundational programming skills.

::: {.callout-tip}
## üìö **Want to Learn More?**

You can explore the full list of available modules in Python‚Äôs standard library by visiting the official documentation here: [https://docs.python.org/3/library/index.html](https://docs.python.org/3/library/index.html)
:::

### Third-Party Libraries

As powerful as the standard library is, it doesn‚Äôt cover everything. That‚Äôs where third-party libraries come in. These are tools developed and maintained by the Python community to solve specific problems more efficiently. To use them, you‚Äôll typically install them using a package manager called `pip`.

For example:

* Need to work with large datasets? Use `pandas`.
* Want to make beautiful visualizations? Try `matplotlib` and `seaborn`.
* Want fast numerical computation? You‚Äôll love `numpy`.

These libraries aren‚Äôt included by default, but they‚Äôre easy to install‚Äîand essential for doing real-world data science.

| Standard Library                             | Third-Party Library                                  |
| -------------------------------------------- | ---------------------------------------------------- |
| Already installed with Python                | Installed manually (via `pip`)                       |
| Examples: `math`, `os`, `random`, `datetime` | Examples: `pandas`, `numpy`, `matplotlib`, `seaborn` |
| No internet needed to use                    | Requires internet to install                         |

Understanding the difference between these two categories will help you know when to reach for built-in tools versus when to seek out more powerful external solutions.

### Knowledge Check

::: {.callout}
## Exploring Python Libraries

Visit the following two documentation pages:

* [Python `math` module (Standard Library)](https://docs.python.org/3/library/math.html)
* [Pandas library (Third-Party)](https://pandas.pydata.org/docs/)

Then answer the following questions:

1. What is one function provided by the `math` module that you could use in one of your other classes? Briefly describe what it does.
2. What is one feature or function of the `pandas` library that stands out to you? How might it help in data analysis?
3. Based on your experience browsing both pages, what are some differences you notice between standard library documentation and third-party library documentation?

**Tip**: This exercise is not about memorizing everything. It's about familiarizing yourself with how to explore documentation and recognizing the types of functionality different libraries provide.
:::

## Working with the Standard Library

The standard library is like Python‚Äôs built-in Swiss Army knife. It includes dozens of modules for common programming tasks‚Äîand because it's part of every Python installation, you can start using it immediately without needing to install anything.

{{< video https://youtu.be/VcGC2MCxtuQ?si=TL8znXeTO9sJoy57 >}}

To use a module from the standard library, you simply use the `import` statement. Once imported, you can access its functions and tools using dot notation.

For example, to use the `math` library to calculate the square root of a number we need to first `import` the `math` library and then we can access the square root function like below:

```{python}
import math

math.sqrt(9)
```


{{< video https://youtu.be/TC7xw7s1LlQ?si=9bnJyl9N2D1n4rb8 >}}

There are ***many*** useful standard libraries - here is an extremely incomplete list of some of the modules you might wish to explore and learn about:

* `os` and `sys`: Tools for interfacing with the operating system, including navigating file directory structures and executing shell commands
* `math` and `cmath`: Mathematical functions and operations on real and complex numbers
* `itertools`: Tools for constructing and interacting with iterators and generators
* `functools`: Tools that assist with functional programming
* `random`: Tools for generating pseudorandom numbers
* `pickle`: Tools for object persistence: saving objects to and loading objects from disk
* `json` and `csv`: Tools for reading JSON-formatted and CSV-formatted files.
* `urllib`: Tools for doing HTTP and other web requests.
* `datetime`: Tools for working with dates, times, and time intervals

Let's see a few of these in action.

### üßÆ `math`: Mathematical Functions

The `math` module gives you access to a wide variety of mathematical operations beyond basic arithmetic. These include square roots, exponentials, logarithms, trigonometric functions, and more.

Here‚Äôs a simple example:

```{python}
import math

print(math.ceil(9.2))        # Returns the smallest integer greater than or equal to 9.2 (i.e., 10)
print(math.factorial(6))     # Returns the factorial of 6 (i.e., 720)
print(math.sqrt(121))        # Returns the square root of 121 (i.e., 11.0)
```

### üìÅ `os`: Interacting with the Operating System

The `os` module allows you to interact with your computer‚Äôs operating system. It‚Äôs helpful for navigating file paths, checking directories, and automating file-related tasks.

Example:

```{python}
import os

# Get the current working directory
print("Current working directory:", os.getcwd())

# List the files and folders in that directory
print("Contents of the directory:", os.listdir())
```

### üìÖ `datetime`: Working with Dates and Times

The `datetime` module is essential for handling and manipulating dates and times. You can get the current date, format it in a specific way, or calculate time differences.

Example:

```{python}
import datetime

# Get today's date
today = datetime.date.today()
print("Today's date is:", today)

# Create a specific date
birthday = datetime.date(1980, 8, 24)
print("Birth date:", birthday)

# How many days have I been on earth
days_alive = (today-birthday).days
print("Days on earth:", days_alive)

```


### Knowledge Check

::: {.callout}
## Using the Standard Library

Start a Jupyter notebook and write code that does the following using only the standard library:

1. Uses the `datetime` module to print today‚Äôs date.
2. Uses the `math` module to calculate the square root of 625.
3. Uses the `random` module to simulate rolling a 6-sided die five times.
4. Uses the `os` module to print your current working directory.

**Tip:** Try running each part separately and look up the documentation if you're unsure how to use a module. This is great practice for solving problems using tools that are already built into Python! If you encounter any difficulties or have questions, don't hesitate to ask ChatGPT or Copilot for assistance!
:::


## Python‚Äôs Data Science Ecosystem & Third-party Modules

The standard library is powerful, but when you begin working on real-world data science tasks, you'll quickly find yourself needing more specialized tools. This is where third-party libraries come in. One of the things that makes Python useful, especially within the world of data science, is its ecosystem of third-party modules. These are external packages developed by the Python community and are not included with Python by default.

These packages are typically hosted on a package manager and [Python Package Index](https://pypi.org/) (PyPI for short) and [Anaconda](https://anaconda.org/anaconda/repo) are the two primary public package managers for Python.  As of June 2025 there was about 645,000 packages available through the Python Package Index (PyPI)! Usually, you can ask Google or ChatGPT about what you are trying to do, and there is often a third party module to help you do it. 

To install packages from PyPI we can either type the following in our terminal:

```bash
# install from PyPI
pip install pkg_name
```

Alternatively, you can install Python packages directly from a code cell in Jupyter notebooks by prefixing the pip install command with an exclamation mark (`!`). For example: 

```python
# install within Jupyter notebook cell
!pip install pkg_name
```

This allows you to manage dependencies without leaving your notebook environment.

::: {.callout-note}
## Try It!

Go ahead and see if you can pip install the [`pandas`](https://pypi.org/project/pandas/) library.
:::

Once a package is installed, you can import the library using the import statement and optionally assign it an alias (a short nickname), which is a common convention:

```python
# install within Jupyter notebook cell
!pip install pandas
```

```python
# import package using the `pd` alias
import pandas as pd
```

Throughout this course we'll use several third party libraries focused on data science -- for example Numpy, SciPy, Pandas, Scikit-learn, among others. Let's look at some examples of these third party packages to give you a flavor of what they do. Don't worry, we'll go into some of these more thoroughly in later lessons!

### NumPy

[NumPy](https://numpy.org/) provides an efficient way to store and manipulate multi-dimensional dense arrays in Python. The important features of NumPy are:

* It provides an ndarray structure, which allows efficient storage and manipulation of vectors, matrices, and higher-dimensional datasets.
* It provides a readable and efficient syntax for operating on this data, from simple element-wise arithmetic to more complicated linear algebraic operations.

::: {.callout-note}
Although the package is officially spelled "NumPy" you will commonly see it referred to as Numpy and numpy across the Python ecosystem (and even within this course).
:::

In the simplest case, NumPy arrays look a lot like Python lists. For example, here is an array containing the range of numbers 1 to 9:

```{python}
import numpy as np

x = np.arange(1, 10)
x
```

::: {.callout-tip}
Standard convention is to import numpy as the **np** alias.
:::

NumPy‚Äôs arrays offer both efficient storage of data, as well as efficient element-wise operations on the data. For example, to square each element of the array, we can apply the `**` operator to the array directly:

```{python}
x ** 2
```

This element-wise operation capability (commonly referred to as __vectorization__) is extremely useful but is not available in base Python. In base Python, if you had a list of these same numbers you would have to loop through each element in the list and compute the square of each number:

```{python}
#| error: true
x_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# not supported
x_list ** 2
```

We would need to use a non-vectorized approach that iterates through each element and computes the square. The below illustrates the much more verbose non-vectorized approach that produces the same result:

::: {.callout-note}
Don't worry about the syntax, you will learn about this in a later lesson. Just note how the above approach with Numpy is far more convenient!
:::

```{python}
x_squared = [val ** 2 for val in x_list]
x_squared
```

Numpy also provides a host of other vectorized arithmetic capabilities. For example, we can compute the mean of a list with the following:

```{python}
np.mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
```

Unlike Python lists (which are limited to one dimension), NumPy arrays can be multi-dimensional. For example, here we will reshape our `x` array into a 3x3 matrix:

```{python}
m = x.reshape((3, 3))
m
```

A two-dimensional array is one representation of a matrix, and NumPy knows how to efficiently do typical matrix operations. For example, you can compute the transpose using `.T`:

```{python}
m.T
```

or a matrix-vector product using `np.dot`:

```{python}
np.dot(m, [5, 6, 7])
```

and even more sophisticated operations like eigenvalue decomposition:

```{python}
np.linalg.eigvals(m)
```

Such linear algebraic manipulation underpins much of modern data analysis, particularly when it comes to the fields of machine learning and data mining.

### Pandas

[Pandas](https://pandas.pydata.org/) is a much newer package than Numpy, and is in fact built on top of it. What Pandas provides is a labeled interface to multi-dimensional data, in the form of a DataFrame object that will feel very familiar to users of R and related languages. DataFrames in Pandas look something like the following.

::: {.callout-tip}
It is a common convention to import Pandas with the **pd** alias.
:::

```{python}
import pandas as pd

df = pd.DataFrame({'label': ['A', 'B', 'C', 'A', 'B', 'C'],
                   'value': [1, 2, 3, 4, 5, 6]})
```

The Pandas interface allows you to do things like select columns by name:

```{python}
df['label']
```

Apply string operations across string entries:

```{python}
df['label'].str.lower()
```

Compute statistical aggregations for numerical columns:

```{python}
df['value'].sum()
```

And, perhaps most importantly, do efficient database-style joins and groupings:

```{python}
df.groupby('label').sum()
```

Here in one line we have computed the sum of all objects sharing the same label, something that is much more verbose (and much less efficient) using tools provided in Numpy and core Python. 

::: {.callout-note}
In future lessons we will go much deeper into Pandas and you'll also see a large dependency on using Pandas as we start exploring other parts of the statistical computing ecosystem (i.e. visualization, machine learning).
:::

### Matplotlib

Matplotlib is currently the most popular scientific visualization packages in Python. Even proponents admit that its interface is sometimes overly verbose, but it is a powerful library for creating a large range of plots.

::: {.callout-tip}
It is a common convention to import Matplotlib with the **plt** alias.
:::

```{python}
import matplotlib.pyplot as plt

plt.style.use('ggplot')  # make graphs in the style of R's ggplot
```

Now let‚Äôs create some data and plot the results:

```{python}
x = np.linspace(0, 10)  # range of values from 0 to 10
y = np.sin(x)           # sine of these values
plt.plot(x, y);         # plot as a line
```

This is the simplest example of a Matplotlib plot; for ideas on the wide range of plot types available, see [Matplotlib‚Äôs online gallery](https://matplotlib.org/gallery.html). 

::: {.callout-note}
Although you'll be exposed to some Matplotlib throughout this course, we will tend to focus on other third-party visualization packages that are simpler to use.
:::

### SciPy

**[SciPy](https://scipy.org/)** is a collection of scientific functionality that is built on Numpy. The package began as a set of Python wrappers to well-known Fortran libraries for numerical computing, and has grown from there. The package is arranged as a set of submodules, each implementing some class of numerical algorithms. Here is an incomplete sample of some of the more important ones for data science:

- scipy.fftpack: Fast Fourier transforms
- scipy.integrate: Numerical integration
- scipy.interpolate: Numerical interpolation
- scipy.linalg: Linear algebra routines
- scipy.optimize: Numerical optimization of functions
- scipy.sparse: Sparse matrix storage and linear algebra
- scipy.stats: Statistical analysis routines

For example, let‚Äôs take a look at interpolating a smooth curve between some data

```{python}
from scipy import interpolate

# choose eight points between 0 and 10
x = np.linspace(0, 10, 8)
y = np.sin(x)

# create a cubic interpolation function
func = interpolate.interp1d(x, y, kind='cubic')

# interpolate on a grid of 1,000 points
x_interp = np.linspace(0, 10, 1000)
y_interp = func(x_interp)

# plot the results
plt.figure()  # new figure
plt.plot(x, y, 'o')
plt.plot(x_interp, y_interp);
```

What we see is a smooth interpolation between the points.

### Other Data Science Packages

Built on top of these tools are a host of other data science packages, including general tools like [Scikit-Learn](http://scikit-learn.org/) for machine learning, [Scikit-Image](http://scikit-image.org/) for image analysis, [Seaborn](https://seaborn.pydata.org/) for statistical visualization, and [Statsmodels](http://statsmodels.sourceforge.net/) for statistical modeling; as well as more domain-specific packages like [AstroPy](http://astropy.org/) for astronomy and astrophysics, [NiPy](http://nipy.org/) for neuro-imaging, and many, many more.

No matter what type of scientific, numerical, or statistical problem you are facing, it‚Äôs likely there is a Python package out there that can help you solve it.

### Knowledge Check

::: {.callout}
## Installing and Using Third-Party Libraries

1. Use `pip` (or `!pip` in a Jupyter notebook) to install the following third-party libraries:

   * `numpy`
   * `bokeh`

2. Once installed, copy and run the following code in a Jupyter notebook:

   ```python
   import numpy as np
   import bokeh.plotting
   import bokeh.io

   bokeh.io.output_notebook()

   # Generate plotting values
   t = np.linspace(0, 2*np.pi, 200)
   x = 16 * np.sin(t)**3
   y = 13 * np.cos(t) - 5 * np.cos(2*t) - 2 * np.cos(3*t) - np.cos(4*t)

   p = bokeh.plotting.figure(height=250, width=275)
   p.line(x, y, color='red', line_width=3)
   text = bokeh.models.Label(x=0, y=0, text='BANA 4080', text_align='center')
   p.add_layout(text)

   bokeh.io.show(p)
   ```

3. After executing the code:

   * What shape is created by this visualization?
   * What part of the code controls the label ‚ÄúBANA 4080‚Äù?
   * How does `numpy` assist in preparing the data for visualization?

:::

## Summary

In this chapter, you learned that one of Python‚Äôs greatest strengths is its rich ecosystem of reusable code‚Äîorganized into modules, libraries, and packages. These tools allow you to write less code, solve complex problems more efficiently, and leverage the collective efforts of the Python community.

We began by discussing the difference between Python‚Äôs standard library and third-party libraries. You learned how to use built-in tools like `math`, `os`, and `datetime` for essential tasks, and how to install and import third-party packages using `pip`.

We then explored Python‚Äôs thriving data science ecosystem‚Äîhighlighting libraries like NumPy, Pandas, Matplotlib, Seaborn, and SciPy. These libraries will be your go-to tools for data wrangling, statistical modeling, and visualization throughout this course and beyond.

You don‚Äôt need to memorize every function from every package right now. Instead, focus on building awareness of what kinds of tools exist and how to access them. The more you practice, the more fluent you‚Äôll become in navigating and using Python‚Äôs expansive ecosystem.



## End-of-Chapter Exercise: Putting Python Libraries to Work

Create a new Jupyter notebook titled **`chapter-6-libraries-practice.ipynb`**. This notebook should include markdown cells to describe each section of your work and code cells to perform the tasks below. Be sure to run your code and document your findings or observations.

::: {.callout collapse="true"}
## Part 1: Standard Library Practice

Use the following standard libraries: `math`, `os`, `datetime`, and `random`.

1. **Math Practice**: Compute the square root, factorial, and log (base 10) of any number you choose using the `math` module.
2. **Working with Files**: Use the `os` module to print your current working directory and list all files in it.
3. **Random Simulation**: Use the `random` module to simulate flipping a coin 20 times. Count how many times you get heads vs. tails.
4. **Date Math**: Use the `datetime` module to:
     * Print today‚Äôs date.
     * Create your birthday as a date object.
     * Calculate how many days old you are.
:::

::: {.callout collapse="true"}
## Part 2: Installing and Using Third-Party Libraries

1. Use `!pip install` to install the following:
   * `numpy`
   * `bokeh`
2. Copy and run the following code to generate a heart-shaped plot:
   ```python
   import numpy as np
   import bokeh.plotting
   import bokeh.io

   bokeh.io.output_notebook()

   t = np.linspace(0, 2*np.pi, 200)
   x = 16 * np.sin(t)**3
   y = 13 * np.cos(t) - 5 * np.cos(2*t) - 2 * np.cos(3*t) - np.cos(4*t)

   p = bokeh.plotting.figure(height=250, width=275)
   p.line(x, y, color='red', line_width=3)
   text = bokeh.models.Label(x=0, y=0, text='BANA 4080', text_align='center')
   p.add_layout(text)

   bokeh.io.show(p)
   ```
3. Add a markdown cell answering the following:
   * What shape is drawn?
   * How does `numpy` help in generating the plot data?
   * What part of the code adds the label ‚ÄúBANA 4080‚Äù?
:::

::: {.callout collapse="true"}
## Part 3: Summary Reflection

In a markdown cell, write 3‚Äì5 sentences reflecting on what you learned in this chapter. Consider:

* What surprised you about Python's library ecosystem?
* Which module or package do you think you'll use the most in this course?
* Does knowing about these tools change the way you think about programming?
:::
