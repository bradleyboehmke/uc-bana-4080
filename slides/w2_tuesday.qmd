---
title: "Week 2 – How We Work with Data in Python"
subtitle: "Jupyter, Data Structures, and Libraries"
format:
  revealjs:
    slide-number: true
    preview-links: auto
    revealjs-plugins:
      - appearance
      - highlight-text
    css: styles.css
    mermaid:
      theme: neutral
footer: 'BANA 4080'
title-slide-attributes:
    data-background-image: images/why-python.gif
    data-background-size: cover
    data-background-opacity: "1.0"
filters: 
  - timer
---

# 🔁 Recap  {background="#43464B"}

## Week 1: What Do You Remember 🤔

::: {.incremental}
- What is the best sport in the world?
- Why is data mining important?
- Why learn coding with Python?
- What is a variable?
- What are Python’s basic data types?
- Where do we write and run Python code?
:::


## Think-Pair-Share {.smaller}

<br><br>

:::: {.columns}
::: {.column width="70%"}
> Discuss with a neighbor (2–3 min):
>
> - What’s one thing that stood out from last week?
> - What’s one thing that confused you?
:::
::: {.column width="30%"}

<center>

<div id="3minWaiting"></div>
<script src="_extensions/produnis/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("3minWaiting", 180, "slide"); 
    });
</script>
</center>

:::
::::

Then we’ll take a few responses...


# Agenda {background="#43464B"}

---

<br><br>

1. Jupyter Notebooks – How we organize our analyses
2. Data Structures – How we organize data
3. Packages & Libraries – How we expand Python
4. In-Class Activities & Discussion

# 📓 Jupyter Notebooks {background="#43464B"}

## 🧠 Think-Pair-Share {.smaller}

**How Would You Report Your Analysis?**

Imagine this scenario -- You’ve been given some data and your boss asks you to deliver a report that:

1. Outlines the problem  
2. Describes your methodology  
3. Shows your results  
4. Ends with a recommendation

. . .

:::: {.columns}
::: {.column width="70%"}
**How would you approach this *before* this class?**

- Would you use Excel for the analysis?  
- Write the report in Word?  
- Use screenshots of charts?

⏳ You have 2–3 minutes — chat with a neighbor!
:::
::: {.column width="30%"}

<center>

<div id="3minWaitingAgain"></div>
<script src="_extensions/produnis/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("3minWaitingAgain", 180, "slide"); 
    });
</script>
</center>
:::
::::

## 📝 How We Write + Run Python Code {.smaller}

::::{.columns}
::: {.column width="50%"}

**🛠️ Traditional Script (.py file)**

- Written in a text editor or IDE (like VS Code)
- Run all at once via terminal or IDE
- No built-in documentation or results
- Great for:
  - Building reusable tools or apps
  - Production code
  - Software engineering workflows

:::

::: {.column width="50%"}

**📓 Jupyter Notebook (.ipynb)**

- Interactive, cell-by-cell execution
- Mix code + text + outputs together
- Designed for exploration & analysis
- Great for:
  - Data science & machine learning
  - Sharing results with others
  - Teaching & documenting

:::
::::

::: {.callout-note}
We'll primarily use **Jupyter Notebooks** in this class  

➡️ They’re perfect for learning, exploring, and communicating results
:::

## 💡 What Can We Do in Notebooks? {.smaller}

- 📝 **Write richly formatted text**
  - Titles, subtitles, and headers to organize your work
  - Paragraphs with emphasis, lists, block quotes

. . .

- ✍️ **Write and render math**
  - Use LaTeX for beautiful equations  
    Example: `$y = \beta_0 + \beta_1 x$` --> $y = \beta_0 + \beta_1 x$

. . .

- 🖼️ **Embed visuals**
  - Plots, tables, and even images inline with your narrative

. . .

- 🧩 **Add interactivity**
  - Sliders, dropdowns, and widgets (via `ipywidgets`, `panel`, etc.)

. . .

- 📚 **Create shareable documents**
  - Convert notebooks to HTML, PDF, or slides
  - Combine notebooks to build online books or dashboards


## 💡 What Can We Do in Notebooks? {.smaller}

::: {.callout}
## A Lot!

**Jupyter isn’t just a coding tool—** It’s a place to analyze, narrate, and present your work all in one.
:::

Let's check out some of the basics:

:::: {.columns}
::: {.column}
<a href="https://colab.research.google.com/github/bradleyboehmke/uc-bana-4080/blob/main/example-notebooks/03_jupyter_notebook_basics.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

https://tinyurl.com/4n5s6ttr
:::
::: {.column}
![alt](images/markdown-basics.png)
:::
::::

## ✅ Best Practices in Jupyter

- Keep cells ordered top-to-bottom
- Avoid rerunning cells randomly
- Use markdown to annotate your code
- Don’t rely on “hidden state”
- Feel free to tinker and explore but always remember to clean up afterwards

## 🧠 Quick Activity {.smaller}

Open this notebook: [https://tinyurl.com/4n5s6ttr](https://tinyurl.com/4n5s6ttr) 

**Part 1 – Try Some Markdown ✍️**

- Modify or add:
  - Headers (`#`, `##`, `###`)
  - Lists (`-`, `*`, `1.`)
  - Bold and italic text (`**bold**`, `*italic*`)
- Add a sentence that includes **a heading, a list, and bold text**

✅ **Note**: You’ll be expected to create _professionally formatted reports_ using Markdown in later assignments—now’s the time to get comfortable!

## 🧠 Quick Activity {.smaller}

Open this notebook: [https://tinyurl.com/4n5s6ttr](https://tinyurl.com/4n5s6ttr)  

**Part 2 – Rearranging Python Cells 🧪**

Try the following:

```python
print(message)
message = "Hello from below!"
```

* What happens if you run cells out of order?
* Can you fix it?
* What’s the right way to organize this?


# Python Data Structures {background="#43464B"}

## Why Do We Care? {.smaller}

Last week, we worked with **individual data types** like:

- `int` for numbers  
- `float` for decimals  
- `str` for text

. . .

But in real-world analyses, we usually need to work with **collections** of values.

- A list of product names  
- A mapping of customer IDs to sales  
- A set of unique email addresses  

::: {.callout-important}
This is where **data structures** come in. **Data structures help us organize values.** 
:::

## Which One Matters {.smaller}

<br>

Choosing the right one makes your code:

- Easier to write  
- Faster to run  
- Simpler to understand

<br>

For example...

## Example 1: Dictionary {.smaller}

<br>

🔎 **Goal**: You need to **look up a product price** by name.

```python
prices = {"apple": 0.99, "banana": 0.59}
```

<br>

* This is a **dictionary** (`dict`)
* It uses **key–value pairs** surrounded by `{}`
* Keys are `"apple"`, `"banana"`; values are prices

::: {.callout-important}
✅ A dictionary allows **fast key-based lookup**.

📌 Use when you need to map one thing (e.g. name) to another (e.g. price).
:::

## Example 2: Tuple {.smaller}

<br>

📍 **Goal**: You’re storing a **GPS coordinate** that should never change.

```python
location = (39.76, -84.19)
```

<br>

* This is a **tuple**
* Ordered, but **immutable** (cannot be changed)
* Surrounded by `()` and contains values in sequence

::: {.callout-important}
✅ A tuple **protects data from being changed accidentally**.

📌 Use when data is **fixed** and position matters.
:::

## Example 3: List {.smaller}

<br>

🎧 **Goal**: You’re storing **songs in a playlist**, in order.

```python
playlist = ["Intro", "Track 1", "Track 2"]
```

<br>

* This is a **list**
* Ordered and **mutable** (can add/remove/change items)
* Uses `[]` brackets for creation

::: {.callout-important}
✅ A list lets you **store sequences of items and modify them easily**.

📌 Use when order matters and you’ll be changing the contents.
:::

## Foundational Built-In Data Structures {.smaller}

<br>

| Type       | Ordered? | Mutable? | Use For                         |
| ---------- | -------- | -------- | ------------------------------- |
| List       | ✅        | ✅        | Sequence of items               |
| Tuple      | ✅        | ❌        | Fixed data, like coordinates    |
| Set        | ❌        | ✅        | Unique items                    |
| Dictionary | ❌        | ✅        | Key–value pairs (like a lookup) |

<br>

::: {.callout-tip}
- Use a **list** when order matters
- Use a **tuple** when the data shouldn’t change
- Use a **set** when uniqueness matters
- Use a **dict** when you need to *look something up*
:::

## Foundational Built-In Data Structures {.smaller}

<br>

| Type       | Ordered? | Mutable? | Use For                         |
| ---------- | -------- | -------- | ------------------------------- |
| List       | ✅        | ✅        | Sequence of items               |
| Tuple      | ✅        | ❌        | Fixed data, like coordinates    |
| Set        | ❌        | ✅        | Unique items                    |
| Dictionary | ❌        | ✅        | Key–value pairs (like a lookup) |

<br>

Examples

```python
groceries = ["eggs", "milk", "bread"]     # List
coords = (40.0, -84.0)                    # Tuple
colors = {"red", "blue", "green"}         # Set
prices = {"apple": 0.99, "banana": 0.59}  # Dict
```


## Summary: Data Structures Matter {.smaller}

<br>

Choosing the right structure makes your code:

* Easier to write and read
* More efficient
* Better aligned to the task

You'll explore these structures more in depth this week and you'll get practice:

1. choosing the right one
2. creating these data structures
3. accessing and modifying items inside them


## 🧠 Mini Challenge - Pick the Structure {.smaller}

> You’re given a scenario. What’s the best structure?

1. Storing favorite songs in order
2. Tracking student GPAs by ID
3. Recording unique hashtags from tweets
4. Saving a fixed pair of (x, y) values

🤔 Work with a partner. What would you use—and why?


# 📦 Packages, Libraries & Modules {background="#43464B"}

## Python Ecosystem

- Python is great, but not perfect out of the box
- We use **modules**, **libraries**, and **packages** to add features

::: {.callout-tip}
Python’s true power comes from its ecosystem of **packages, libraries, and modules** that extend its core functionality
:::

## 🤔 Build from Scratch or Reuse? {.smaller}

If you needed to calculate the **correlation between two variables (x and y)**

```python
x = [2, 4, 6, 8]
y = [1, 3, 5, 7]
```

would you rather...

::::{.columns}
::: {.column width="50%"}

**🛠️ Build It Yourself**

```python
mean_x = sum(x) / len(x)
mean_y = sum(y) / len(y)

numerator = sum((a - mean_x)*(b - mean_y) for a, b in zip(x, y))
denominator = (
    sum((a - mean_x)**2 for a in x) *
    sum((b - mean_y)**2 for b in y)
) ** 0.5

correlation = numerator / denominator
```

:::

::: {.column width="50%"}

**🤖 Use a Library**

```python
import numpy as np

correlation = np.corrcoef(x, y)[0, 1]
```

:::
::::

::: {.callout-important}
✅ **Packages** like `numpy` help us reuse reliable, optimized code

📌 They save time, reduce bugs, and make your code easier to read
:::

## Python Ecosystem

::: {.callout-tip}
Python’s true power comes from its ecosystem of **packages, libraries, and modules** that extend its core functionality
:::

![](images/pkg-ecosystem.jpeg){fig-align="center"}

## Vocabulary {.smaller}

There are terminology differences between...

- **Module**: A single .py file that contains Python code—functions, variables, classes—that you can reuse. For example, the math module lets you do mathematical calculations.
- **Library**: A collection of related modules bundled together. For example, pandas is a library that includes several modules for data manipulation.
- **Package**: A directory containing one or more modules or libraries, with an __init__.py file that tells Python it’s a package. You can think of a package as the container that holds libraries and modules.

::: {.callout-important}
But I'm not hung up in you knowing these differences at this time.  More importantly, I want you to understand the following...
:::

## 🛠️ Standard vs. Third-Party {.smaller}

- **Standard Library** – comes with Python (`math`, `datetime`)
- **Third-Party Libraries** – must install (`numpy`, `pandas`, `seaborn`)

:::: {.columns}
::: {.column}
**Standard Library**

```{python}
#| echo: true
import random
random.randint(1, 10)
```

<br>

```{python}
#| echo: true
import datetime
print(datetime.date.today())
```

:::
::: {.column}
**Third-Party Library**

```python
# must first install (typically from PyPI)
pip install numpy   # command line
!pip install numpy  # jupyter notebook
```
<br>

```{python}
#| echo: true
import numpy as np

np.mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
```

:::
::::


## 🛠️ Standard vs. Third-Party {.smaller}

- **Standard Library** – comes with Python (`math`, `datetime`)
- **Third-Party Libraries** – must install (`numpy`, `pandas`, `seaborn`)

:::: {.columns}
::: {.column}
**Standard Library**

* Already installed with Python
* [Lots of functionality](https://docs.python.org/3/library/index.html)
  * `os`
  * `math`
  * `itertools`
  * `functools`
  * `random`: 
  * `pickle`
  * `datetime` 
  * etc.

:::
::: {.column}
**Third-Party Library**

* Must be installed
* Python Package Index (PyPI - https://pypi.org/)
  * `numpy`
  * `pandas`
  * `matplotlib`
  * `seaborn`
  * `scikit-learn`
  * 650,000+ pkgs on PyPI!!! 
  

:::
::::

## 🧠 Library Scavenger Hunt {.smaller}

:::: {.columns}
::: {.column width="70%"}
In 5 minutes, find:

- 1 standard library
- 1 third-party package
- What do they do?
- One function or method they provide

📢 Be ready to share what you found!
:::
::: {.column width="30%"}

<center>

<div id="5minWaiting"></div>
<script src="_extensions/produnis/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("5minWaiting", 300, "slide"); 
    });
</script>
</center>

:::
::::


# Let's Wrap This Up {background="#43464B"}

## Recap: What Did We Learn?

- Jupyter helps us explore + explain
- Data structures help us organize
- Libraries help us do *more* with Python


## Next Up: Lab Time on Thursday

Hands-on practice with...

- Jupyter notebooks
- Data structures
- Practice using packages

<br>

::: {.callout-important}
Be sure to read the chapter readings **before** Thursday's lab!  And bring your questions!
:::

## Q&A 🙋‍♀️

Open floor for any questions regarding...

- Last week's content
- This week's content
- Data mining in general
- Career questions
- Etc

